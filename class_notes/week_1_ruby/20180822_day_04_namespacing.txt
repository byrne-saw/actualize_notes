inheritance is called composition 

module has to be at the top, CamelCase
  a set of conceptual things 

a second way of using modules 

namespacing - creating the box (with module)
  module::class 
  no spaced between :: 

class variable 

a class method must begin with self.

rand(1..100)    -- give a random number from 1 to 100

private  - any method below private within a class is not available outside of the class, but can be called within the class

arguments and parameters are synonymous 

setting a default : def example(purple_hippo, pink_elephant="rupert")



##########################
Re-watching day 4 lecture:
##########################

Modules
  -key piece, only for behaviors, not for attributes
  -CamelCase
  -module must come first
  -name should not describe some "thing" - a set of conceptual things - "able" ex Math, "Reportable"
  -method goes into module
  -in the class you want to use a module in, you use: include ModuleName
  -never defined inside a class (might be functionally possible but the idea is to access it outside of a class)
  


"Mixin" or "Composition" are names for the act of using module. 

def initialize - debate on if the initialize method should be "mixin", Josh doesn't, would make a class to inherit to do that. 

Modules are effective when subclasses share behavior that a superclass doesn't have. 

super() brings in the super class's initialize 

Namespacing
  -using modules to "box-in" parts of our program. allows code to play well with others' code - ie if both codes have an employee class, they can be kept separate with use of modules. 

To call a class that is namespaced - Module::Class.new

##

Class Variables vs Instance Variables 

  Instance variable (@) exists anywhere within an object

   Class variable (@@) 

class Sheep
  @@count = 0
  def initialize(name)
    @name = name
    @@count += 1
    @id = @@count #allows you to indirectly access the class variable within an object
  end
end


Class Method - self.method_name


Private vs Public: 
  -any method found belove the word private inside the class are considered unavailable outside of the class, but still accessible within the class


## 

arguments (aka parameters) 

I want to give an argument sometimes, but not always - setting a default.


##

splat
  def example(*trees)

  allows you to give any number of arguments, the arguments are collected into an array